// helpers
    Object findDuplicate(def duplicates, def predicateDuplicate){
      for(def duplicate:duplicates){
        if(duplicate.sourceUid == predicateDuplicate.sourceUid){return duplicate}
      }
      return null;
    }

    Object findDuplicateBySourceUid(def duplicates, String sourceUid){
      for(def duplicate:duplicates){
        if(duplicate.sourceUid == sourceUid){return duplicate}
      }
      return null;
    }

    Object omitRules(def duplicate){
    if(duplicate.rules == null){return duplicate;}

    HashMap result = new HashMap();
    result.putAll(duplicate);
    result.remove('rules');

    return result;
    }

    int addNx(ArrayList duplicates, def duplicate){
      if(findDuplicate(duplicates, duplicate) == null){
        duplicates.add(duplicate);
      }

      return duplicates.size();
    }

    int findDuplicateIndex(def duplicates, def predicateDuplicate){
      for(def duplicate:duplicates){
        if(duplicate.sourceUid == predicateDuplicate.sourceUid){return duplicates.indexOf(duplicate)}
      }
      return -1;
    }

    int replaceIxOrAddNx(ArrayList duplicates, def duplicate){
      int duplicateIndex = findDuplicateIndex(duplicates, duplicate);

      if( duplicateIndex == -1 ){
        duplicates.add(duplicate);
      } else {
        duplicates.set(duplicateIndex, duplicate);
      }

      return duplicates.size();
    }

    int removeIx(ArrayList duplicates, def duplicate){
      for(int i = 0; i < duplicates.size(); i++ ){
       if(duplicates[i].sourceUid == duplicate.sourceUid){duplicates.remove(i); break;}
      }

      return  duplicates.size();
    }

    int removeIxBySourceUid(ArrayList duplicates, String sourceUidToRemove){
       for(int i = 0; i < duplicates.size(); i++ ){
         if(duplicates[i].sourceUid == sourceUidToRemove){duplicates.remove(i); break;}
       }

       return  duplicates.size();
    }

    int removeIxBySourceUidAndNotSessionName(ArrayList duplicates, String sourceUidToRemove, String sessionName){
       for(int i = 0; i < duplicates.size(); i++ ){
         if(duplicates[i].sourceUid == sourceUidToRemove && duplicates[i].sessionName != sessionName){duplicates.remove(i); break;}
       }

       return  duplicates.size();
    }

    boolean isEmptyArray(def value){
        if(!(value instanceof ArrayList)){return true;}
        if(value.size() == 0) return true;

        return false;
    }


    int removeIxBySourceUidsAndSessionName(ArrayList duplicates, ArrayList sourceUids, String sessionName, String selfSourceUid){
        Iterator it = duplicates.iterator();
        while(it.hasNext()){
        def duplicate = it.next();
             for(int j = 0; j < sourceUids.size(); ++j){
               if(duplicate.sourceUid == sourceUids[j] &&
                  duplicate.sessionName != sessionName &&
                  (isEmptyArray(duplicate.rules) || duplicate.sourceUid == selfSourceUid)
                ){it.remove();}
             }
        }

        return  duplicates.size();
    }


    boolean hasTransDuplicate(ArrayList duplicates){
          for(def duplicate:duplicates){
            if(duplicate.rules == null){return true}
          }
          return false;
    }

    ArrayList getSourceUids(ArrayList duplicates){
      ArrayList sourceUids = new ArrayList();
          for(def duplicate:duplicates){
            sourceUids.add(duplicate.sourceUid);
          }

      return sourceUids;
    }

    ArrayList getDuplicatesSources(ArrayList duplicates){
        ArrayList sources = new ArrayList();
            for(def duplicate:duplicates){
                sources.add(duplicate.source);
            }

     return sources;
    }

    ArrayList buildSources(def docObject){
        if(docObject.business.duplicates == null){return null;}
        ArrayList sources = getDuplicatesSources(docObject.business.duplicates);
        sources.add(docObject.source);

        return uniqSort(sources);
    }

    ArrayList uniqSort(ArrayList values){
        ArrayList result;

        HashSet hset = new HashSet(values);
        result = new ArrayList(hset);
        result.sort(Comparator.naturalOrder());

        return result;
    }

    String buildSourceUidChain(def docObject){
        if(docObject.business.duplicates == null){return "!" + docObject.sourceUid + "!";}

        ArrayList sourceUids = getSourceUids(docObject.business.duplicates);
        String result = "";

        sourceUids.add(docObject.sourceUid);
        sourceUids = uniqSort(sourceUids);

        for(String sourceUid:sourceUids){
          result = result.concat(sourceUid + "!")
        }

        return "!" + result;
    }

// main
    if(ctx._source.business == null){
        ctx._source.business= new HashMap();
    }

    if(ctx._source.business.duplicates == null){
      ctx._source.business.duplicates = new ArrayList();
    }




    if(ctx._source.sourceUid == params.mainSourceUid){
        // Target docObject
        ctx._source.business.duplicateRules = params.duplicateRules;
        ctx._source.business.isDeduplicable = true;

        for(def sourceUid:params.sourceUidsToRemove){
            removeIxBySourceUid(ctx._source.business.duplicates, sourceUid);
        }

        for(def duplicate:params.duplicatesAndSelf ){
          if(duplicate.sourceUid == ctx._source.sourceUid){
            continue;
          }

          replaceIxOrAddNx(ctx._source.business.duplicates, duplicate);
        }
    } else {
       // Rest of the documents
        if(
            params.sourceUidsToRemove.contains(ctx._source.sourceUid)
        ){
            // Doc only to remove
            for(def sourceUid:getSourceUids(params.duplicatesAndSelf)){
                removeIxBySourceUid(ctx._source.business.duplicates, sourceUid);
            }
        } else {
           removeIxBySourceUidAndNotSessionName(ctx._source.business.duplicates, params.mainSourceUid, params.currentSessionName);

            for(def sourceUid:params.sourceUidsToRemove){
                removeIxBySourceUid(ctx._source.business.duplicates, sourceUid);
            }

           for(def duplicate:params.duplicatesAndSelf ){
              if(duplicate.sourceUid == ctx._source.sourceUid){
                continue;
              }

              addNx(ctx._source.business.duplicates, omitRules(duplicate));
            }
        }
    }



    ctx._source.business.isDuplicate = ctx._source.business.duplicates.size() > 0 ? true: false;

    ctx._source.business.hasTransDuplicate = hasTransDuplicate(ctx._source.business.duplicates);

    ctx._source.business.sources = buildSources(ctx._source);

    ctx._source.business.sourceUidChain = buildSourceUidChain(ctx._source);

// update technical
    if(ctx._source.technical == null){
        ctx._source.technical = new HashMap();
    }

    Date date = new Date();
    ctx._source.technical.put('sessionName', params.currentSessionName);
    ctx._source.technical.put("modificationDate", date.getTime());
